/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2013, Joyent, Inc. All rights reserved.
 *
 */

/*
 *
 * vmadm_name (vmadm's name w/ _)
 * orig_name (zonecfg's name for example w/ -)
 * comes_from: zonecfg.zone, zonecfg.attr, zonecfg.rctl, zonecfg.nic, zfs,
 *     zoneadm, metadata.json, tags.json
 * updatable
 * allowed_values: [list]
 * type: boolean, string, integer, ...
 * transform: fixBoolean, unmangleMem, numberify, â€¦
 *
 */

var KVM_MEM_OVERHEAD = 1024;
var KVM_MIN_MEM_OVERHEAD = 256;

exports.properties = {
    alias: {
        zonexml: 'zone.attr.alias',
        loadValueTranslator: 'utils.unbase64'
    }, archive_on_delete: {
        zonexml: 'zone.attr.archive-on-delete',
        loadValueTranslator: 'utils.fixBoolean'
    }, autoboot: {
        zonexml: 'zone.autoboot',
        loadValueTranslator: 'utils.fixBoolean'
    }, billing_id: {
        zonexml: 'zone.attr.billing-id'
    }, boot: {
        zonexml: 'zone.attr.boot'
    }, brand: {
        zonexml: 'zone.brand'
    }, cpu_cap: {
        zonexml: 'zone.rctl.zone.cpu-cap.privileged.deny',
        loadValueTranslator: 'utils.numberify'
    }, cpu_type: {
        zonexml: 'zone.attr.cpu_type'
    }, cpu_shares: {
        zonexml: 'zone.rctl.zone.cpu-shares.privileged.none',
        loadValueTranslator: 'utils.numberify'
    }, create_timestamp: {
        zonexml: 'zone.attr.create-timestamp'
    }, debug_id: {
        zonexml: 'zone.debugid',
        ignore: true
    }, default_gateway: {
        deprecated: true,
        zonexml: 'zone.attr.default-gateway'
    }, 'disks.boot': {
        zonexml: 'zone.device.net-attr.boot',
        loadValueTranslator: 'utils.fixBoolean'
    }, 'disks.image_size': {
        zonexml: 'zone.device.net-attr.image-size',
        loadValueTranslator: 'utils.numberify'
    }, 'disks.image_uuid': {
        zonexml: 'zone.device.net-attr.image-uuid'
    }, 'disks.media': {
        zonexml: 'zone.device.net-attr.media'
    }, 'disks.model': {
        zonexml: 'zone.device.net-attr.model'
    }, 'disks.path': {
        zonexml: 'zone.device.match'
    }, 'disks.size': {
        zonexml: 'zone.device.net-attr.size',
        loadValueTranslator: 'utils.numberify'
    }, disk_driver: {
        zonexml: 'zone.attr.disk-driver'
    }, dns_domain: {
        zonexml: 'zone.attr.dns-domain'
    }, do_not_inventory: {
        zonexml: 'zone.attr.do-not-inventory',
        loadValueTranslator: 'utils.fixBoolean'
    }, failed: {
        zonexml: 'zone.attr.failed'
    }, 'filesystems.source': {
        zonexml: 'zone.filesystem.special'
    }, 'filesystems.target': {
        zonexml: 'zone.filesystem.directory'
    }, 'filesystems.type': {
        zonexml: 'zone.filesystem.type'
    }, 'filesystems.raw': {
        zonexml: 'zone.filesystem.raw'
    }, firewall_enabled: {
        zonexml: 'zone.attr.firewall-enabled',
        loadValueTranslator: 'utils.fixBoolean'
    }, fs_allowed: {
        zonexml: 'zone.fs-allowed'
    }, global_allowed_address: {
        zonexml: 'zone.network.allowed-address',
        ignore: true
    }, hostname: {
        zonexml: 'zone.attr.hostname'
    }, ip_type: {
        zonexml: 'zone.ip-type',
        ignore: true
    }, image_uuid: {
        zonexml: 'zone.attr.dataset-uuid'
    }, init_name: {
        zonexml: 'zone.attr.init-name'
    }, limit_priv: {
        zonexml: 'zone.limitpriv'
    }, maintain_resolvers: {
        zonexml: 'zone.attr.maintain-resolvers',
        loadValueTranslator: 'utils.fixBoolean'
    }, max_locked_memory: {
        zonexml: 'zone.rctl.zone.max-locked-memory.privileged.deny',
        loadValueTranslator: 'utils.unmangleMem'
    }, max_lwps: {
        zonexml: 'zone.rctl.zone.max-lwps.privileged.deny',
        loadValueTranslator: 'utils.numberify'
    }, max_physical_memory: {
        zonexml: 'zone.rctl.zone.max-physical-memory.privileged.deny',
        loadValueTranslator: 'utils.unmangleMem'
    }, max_swap: {
        zonexml: 'zone.rctl.zone.max-swap.privileged.deny',
        loadValueTranslator: 'utils.unmangleMem'
    }, nic_driver: {
        zonexml: 'zone.attr.nic-driver'
    }, nics: {
        zonexml: 'zone.network',
        type: 'array'
    }, 'nics.dhcp_server': {
        zonexml: 'zone.network.net-attr.dhcp_server',
        loadValueTranslator: 'utils.fixBoolean'
    }, 'nics.gateway': {
        zonexml: 'zone.network.net-attr.gateway'
    }, 'nics.interface': {
        zonexml: 'zone.network.physical'
    }, 'nics.ip': {
        zonexml: 'zone.network.net-attr.ip'
    }, 'nics.mac': {
        zonexml: 'zone.network.mac-addr'
    }, 'nics.model': {
        zonexml: 'zone.network.net-attr.model'
    }, 'nics.netmask': {
        zonexml: 'zone.network.net-attr.netmask'
    }, 'nics.nic_tag': {
        zonexml: 'zone.network.global-nic'
    }, 'nics.primary': {
        zonexml: 'zone.network.net-attr.primary',
        loadValueTranslator: 'utils.fixBoolean'
    }, 'nics.vlan_id': {
        zonexml: 'zone.network.vlan-id',
        loadValueTranslator: 'utils.numberify'
    }, owner_uuid: {
        zonexml: 'zone.attr.owner-uuid'
    }, package_name: {
        deprecated: true,
        zonexml: 'zone.attr.package-name'
    }, package_version: {
        deprecated: true,
        zonexml: 'zone.attr.package-version'
    }, qemu_extra_opts: {
        zonexml: 'zone.attr.qemu-extra-opts',
        loadValueTranslator: 'utils.unbase64'
    }, qemu_opts: {
        zonexml: 'zone.attr.qemu-opts',
        loadValueTranslator: 'utils.unbase64'
    }, ram: {
        zonexml: 'zone.attr.ram',
        loadValueTranslator: 'utils.numberify'
    }, resolvers: {
        zonexml: 'zone.attr.resolvers',
        loadValueTranslator: 'utils.separateCommas'
    }, restart_init: {
        zonexml: 'zone.attr.restart-init',
        loadValueTranslator: 'utils.fixBoolean'
    }, spice_opts: {
        zonexml: 'zone.attr.spice-opts',
        loadValueTranslator: 'utils.unbase64'
    }, spice_password: {
        zonexml: 'zone.attr.spice-password',
        loadValueTranslator: 'utils.unbase64'
    }, spice_port: {
        zonexml: 'zone.attr.spice-port',
        loadValueTranslator: 'utils.numberify'
    }, transition: {
        zonexml: 'zone.attr.transition'
    }, tmpfs: {
        zonexml: 'zone.attr.tmpfs',
        loadValueTranslator: 'utils.numberify'
    }, v: {
        zonexml: 'zone.attr.vm-version',
        loadValueTranslator: 'utils.numberify'
    }, vcpus: {
        zonexml: 'zone.attr.vcpus',
        loadValueTranslator: 'utils.numberify'
    }, virtio_txburst: {
        zonexml: 'zone.attr.virtio-txburst',
        loadValueTranslator: 'utils.numberify'
    }, virtio_txtimer: {
        zonexml: 'zone.attr.virtio-txtimer',
        loadValueTranslator: 'utils.numberify'
    }, vga: {
        zonexml: 'zone.attr.vga'
    }, vm_autoboot: {
        zonexml: 'zone.attr.vm-autoboot',
        loadValueTranslator: 'utils.fixBoolean'
    }, vnc_password: {
        zonexml: 'zone.attr.vnc-password',
        loadValueTranslator: 'utils.unbase64'
    }, vnc_port: {
        zonexml: 'zone.attr.vnc-port',
        loadValueTranslator: 'utils.numberify'
    }, zfs_io_priority: {
        zonexml: 'zone.rctl.zone.zfs-io-priority.privileged.none',
        loadValueTranslator: 'utils.numberify'
    }, zonename: {
        zonexml: 'zone.name',
        create: ['all'],
        receive: ['all']
    }, zonepath: {
        zonexml: 'zone.zonepath',
        type: 'string'
    }
};

/*
 * This defines all of the properties allowed, required and features that a
 * brand has. For each of the allowed/required properties you have a list of
 * actions for which this is allowed/required. For properties that are lists
 * of objects, you can specify the action as 'add' or 'update' for when you're
 * adding or updating one of those objects.
 *
 * Features can currently be one of:
 *
 * 'cleanup_dataset' -- (boolean) whether to remove trash before booting
 * 'default_memory_overhead' -- (integer) memory above 'ram' that's added
 * 'limit_priv': (list) list of priviledges for this zone (if not 'default')
 * 'mdata_restart' -- (boolean) whether the brand supports restarting its
 *                    mdata:fetch service to update properties in the zone
 * 'min_memory_overhead' -- (integer) minimum delta between ram + max_physical
 * 'model_required' -- (boolean) whether a .model is required on nics and disks
 * 'pid_file' -- (pathname) file containing the PID for zones with one process
 * 'runtime_info' -- (boolean) whether this zone supports the 'info' command
 * 'serial_console' -- (boolean) whether this zone uses serial console
 * 'type' -- the type of the VM (OS or KVM), all brands should include this
 * 'update_mdata_exec_timeout' (boolean) whether to update mdata:exec timeout
 * 'update_rctls' (boolean) whether we can update rctls 'live' for this zone
 * 'use_tmpfs' -- (boolean) whether this type of zone uses tmpfs
 * 'use_vm_autoboot' -- (boolean) use vm-autoboot instead of autoboot
 * 'use_vmadmd' -- (boolean) use vmadmd for some actions instead of direct
 * 'var_svc_provisioning' -- (boolean) whether brand uses /var/svc/provisioning
 * 'wait_for_hwsetup' -- (boolean) use QMP and provision_success when hwsetup
 * 'write_zone_netfiles' -- (boolean) write out files like /etc/hostname.net0
 * 'zlogin_console' -- (boolean) use zlogin -C for console (vs. serial_console)
 * 'zoneinit' -- (boolean) this brand's setup may be controlled by zoneinit
 *
 * All of the keys:
 *
 *  allowed_properties
 *  required_properties
 *  features
 *
 * should be defined for each brand. Even if empty.
 */
exports.brand_options = {
    'joyent': {
        'features': {
            'brand_install_script': '/usr/lib/brand/joyent/jinstall',
            'cleanup_dataset': true,
            'mdata_restart': true,
            'reprovision': true,
            'type': 'OS',
            'update_mdata_exec_timeout': true,
            'update_rctls': true,
            'use_tmpfs': true,
            'write_zone_netfiles': true,
            'zlogin_console': true,
            'zoneinit': true
        }
    }, 'joyent-minimal': {
        'features': {
            'brand_install_script': '/usr/lib/brand/joyent-minimal/jinstall',
            'cleanup_dataset': true,
            'mdata_restart': true,
            'reprovision': true,
            'type': 'OS',
            'update_mdata_exec_timeout': true,
            'update_rctls': true,
            'use_tmpfs': true,
            'var_svc_provisioning': true,
            'write_zone_netfiles': true,
            'zlogin_console': true
        }
    }, 'sngl': {
        'features': {
            'cleanup_dataset': true,
            'mdata_restart': true,
            'type': 'OS',
            'update_mdata_exec_timeout': true,
            'update_rctls': true,
            'use_tmpfs': true,
            'write_zone_netfiles': true,
            'zlogin_console': true,
            'zoneinit': true
        }
    }, 'kvm': {
        'features': {
            'default_memory_overhead': KVM_MEM_OVERHEAD,
            'limit_priv': ['default', '-file_link_any', '-net_access',
                '-proc_fork', '-proc_info', '-proc_session'],
            'min_memory_overhead': KVM_MIN_MEM_OVERHEAD,
            'model_required': true,
            'pid_file': '/tmp/vm.pid',
            'runtime_info': true,
            'serial_console': true,
            'type': 'KVM',
            'use_vm_autoboot': true,
            'use_vmadmd': true,
            'var_svc_provisioning': true,
            'wait_for_hwsetup': true
        }
    }
};
